<?php

/**
 * @file
 * govCMS Akamai Fast Purge
 */

use Akamai\Open\EdgeGrid\Client;
use GuzzleHttp\Middleware;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Exception\ClientException;

define('GAFP_WATCHDOG_TYPE', "govcms_akamai_fast_purge");

/**
 * Implements hook_permission().
 */
function govcms_akamai_fast_purge_permission() {
  return array(
    'administer edgerc file path' => array(
      'title' => t('Administer Akaimai\'s configuration file path.'),
      'description' => t('Access and set the configuration path for Akaimai fast purge.'),
    ),
    'administer akaimai configuration' => array(
      'title' => t('Administer Akamai fast purge configuration'),
      'description' => t('Access and set the configuration for Akaimai fast purge to consume.'),
    ),
    'administer akamai network' => array(
      'title' => t('Administer Akamai network'),
      'description' => t('Access and set the configuration for Akaimai network.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function govcms_akamai_fast_purge_menu() {
  $items = [];

  $items['admin/config/services/akamai-fast-purge'] = [
    'title' => 'Akamai Fast Purge',
    'description' => 'Configuration for govCMS Akamai Fast Purge module',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['govcms_akamai_fast_purge_form'],
    'access arguments' => ['administer akaimai configuration'],
    'type' => MENU_NORMAL_ITEM,
  ];

  return $items;
}

/**
 * Fetch a list of configured extensions.
 *
 * @return array
 *   A flat array of supported extensions.
 */
function _govcms_akamai_get_configured_extensions() {
  $extensions = array();
  $support = array(
    'pdf' => variable_get('govcms_akamai_extensions_pdf', FALSE),
    'word' => variable_get('govcms_akamai_extensions_word', FALSE),
    'excel' => variable_get('govcms_akamai_extensions_excel', FALSE),
    'zip' => variable_get('govcms_akamai_extensions_zip', FALSE),
    'images' => variable_get('govcms_akamai_extensions_images', FALSE),
  );
  if (NULL != $support['pdf'] && 0 != $support['pdf'] && FALSE != $support['pdf']) {
    $extensions[] = 'pdf';
  }
  if (NULL != $support['word'] && 0 != $support['word'] && FALSE != $support['word']) {
    $extensions[] = 'docx';
    $extensions[] = 'doc';
  }
  if (NULL != $support['excel'] && 0 != $support['excel'] && FALSE != $support['excel']) {
    $extensions[] = 'xlsx';
    $extensions[] = 'xls';
  }
  if (NULL != $support['zip'] && 0 != $support['zip'] && FALSE != $support['zip']) {
    $extensions[] = 'zip';
  }
  if (NULL != $support['images'] && 0 != $support['images'] && FALSE != $support['images']) {
    $extensions[] = 'jpg';
    $extensions[] = 'jpeg';
    $extensions[] = 'png';
    $extensions[] = 'gif';
    $extensions[] = 'tiff';
  }

  return $extensions;
}

/**
 * Page callback: Akamai Fast Purge settings
 *
 * @see govcms_akamai_fast_purge_menu()
 */
function govcms_akamai_fast_purge_form($form, &$form_state) {

  if (!$check = _govcms_akamai_fast_purge_detect_edgerc()) {
    if (count(_govcms_akamai_fast_purge_process_edgerc()) == 0) {
      drupal_set_message('Akamai Fast Purge is enabled but no credentials have been provided.', 'warning');
    }
  }

  $form['vtabs'] = array(
    '#type' => 'vertical_tabs',
  );

  $form['general'] = array(
    '#type' => 'fieldset',
    '#title' => t('General'),
    '#description' => t('General settings for Akamai Fast Purge integration with govCMS'),
    '#group' => 'vtabs',
  );

  $form['support'] = array(
    '#type' => 'fieldset',
    '#title' => t('Extensions'),
    '#description' => t('Which extensions should be supported on this site?'),
    '#group' => 'vtabs',
  );

  $form['onetime'] = array(
    '#type' => 'fieldset',
    '#title' => t('One-time purge'),
    '#group' => 'vtabs',
  );

  $form['advanced'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced'),
    '#description' => t('Advanced settings which you have access to, generally have security controls in place.'),
    '#group' => 'vtabs',
  );

  $form['general']['govcms_akamai_fast_purge_enabled'] = [
    '#type' => 'checkbox',
    '#title' => t('Enable file purge on creation, update and deletion'),
    '#default_value' => variable_get('govcms_akamai_fast_purge_enabled', TRUE),
  ];

  $form['support']['govcms_akamai_extensions_pdf'] = array(
    '#type' => 'checkbox',
    '#title' => t('Purge PDF cache on create/update.'),
    '#default_value' => variable_get('govcms_akamai_extensions_pdf', FALSE),
  );
  $form['support']['govcms_akamai_extensions_word'] = array(
    '#type' => 'checkbox',
    '#title' => t('Purge DOCX/DOC cache on create/update.'),
    '#default_value' => variable_get('govcms_akamai_extensions_word', FALSE),
  );
  $form['support']['govcms_akamai_extensions_excel'] = array(
    '#type' => 'checkbox',
    '#title' => t('Purge XLSX/XLS cache on create/update.'),
    '#default_value' => variable_get('govcms_akamai_extensions_excel', FALSE),
  );
  $form['support']['govcms_akamai_extensions_zip'] = array(
    '#type' => 'checkbox',
    '#title' => t('Purge ZIP cache on create/update.'),
    '#default_value' => variable_get('govcms_akamai_extensions_zip', FALSE),
  );
  $form['support']['govcms_akamai_extensions_images'] = array(
    '#type' => 'checkbox',
    '#title' => t('Purge cache for supported image extensions on create/update.'),
    '#default_value' => variable_get('govcms_akamai_extensions_images', FALSE),
  );
  $form['onetime']['govcms_akamai_purge_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Manual purge'),
    '#placeholder' => t('sites/default/files/file.pdf'),
    '#default_value' => '',
    '#disabled' => TRUE,
    '#size' => 120,
    '#maxlength' => 120,
    '#description' => t('Path to the URL for one-time manual purging.<br /><em>Do not include the domain or preceding slash (/)</em>'),
  );

  $form['advanced']['govcms_akamai_fast_purge_api_network'] = array(
    '#type' => 'select',
    '#title' => t('Network'),
    '#options' => array(
      0 => t('staging'),
      1 => t('production'),
    ),
    '#default_value' => variable_get('govcms_akamai_fast_purge_api_network', 0),
    '#description' => t('The Akamai network to use.'),
    '#access' => user_access('administer akamai network'),
  );

  $form['advanced']['govcms_akamai_fast_purge_credentials_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Configuration'),
    '#default_value' => (_govcms_akamai_fast_purge_detect_edgerc()) ? 'Configuration detected' : 'No configuration detected',
    '#size' => 120,
    '#maxlength' => 120,
    '#description' => t('The API credentials are stored in a variable inside the hosting provider, this will simply check if the expected values have been detected..'),
    '#required' => TRUE,
    '#disabled' => TRUE,
    '#access' => user_access('administer edgerc file path'),
  );

  $extensions = implode(', ', _govcms_akamai_get_configured_extensions());
  if (count($extensions) === 0 || $extensions === '') {
    $extensions = '<em>No extensions have been configured.</em>';
  }

  $form['support']['govcms_akamai_supported_extensions'] = array(
    '#type' => 'item',
    '#title' => t('Configured extensions'),
    '#markup' => "The following file extensions have been configured:<br />{$extensions}",
  );

  $form = system_settings_form($form);
  $form['#submit'][] = 'govcms_akamai_fast_purge_form_submit';
  return $form;
}

/**
 * Custom form submit handler for the custom purge path.
 */
function govcms_akamai_fast_purge_form_submit($form, $form_state) {
  // Purge a custom path.
  $custom_path = $form_state['values']['govcms_akamai_purge_path'];
  if ($custom_path != "") {
    _govcms_akamai_fast_purge_trigger($custom_path);
  }
}

/**
 * Implements hook_file_insert().
 */
function govcms_akamai_fast_purge_file_insert($file) {
  _govcms_akamai_fast_purge_trigger($file);
}

/**
 * Implements hook_file_update().
 */
function govcms_akamai_fast_purge_file_update($file) {
  // We only need to purge the url if the file is being replaced.
  if (empty($file->replace_upload)) {
    return;
  }
  _govcms_akamai_fast_purge_trigger($file);
}

/**
 * Implements hook_file_delete().
 */
function govcms_akamai_fast_purge_file_delete($file) {
  _govcms_akamai_fast_purge_trigger($file);
}

/**
 * Detect if a configuration has been set.
 */
function _govcms_akamai_fast_purge_detect_edgerc() {
  return (count(_govcms_akamai_fast_purge_process_edgerc()) === 1) ? TRUE : FALSE;
}

/**
 * Process data available in the edgerc file/variable.
 */
function _govcms_akamai_fast_purge_process_edgerc() {
  $creds = getenv('EDGERC_PATH');
  $data = explode(" ", $creds);
  $credentials = array();
  foreach ($data as $key => $data_item) {
    switch ($data_item):
      case 'host':
      case 'access_token':
      case 'client_token':
      case 'client_secret':
      case 'location':
        $credentials['default'][$data_item] = $data[$key + 2];
        break;
      default:
        break;
    endswitch;
  }
  return $credentials;
}

/**
 * Trigger the Akamai Fast Purge if needed.
 *
 * @param $file
 *  The file object to be purged.
 */
function _govcms_akamai_fast_purge_trigger($file) {
  $purge_enabled = variable_get('govcms_akamai_fast_purge_enabled', TRUE);
  if (!$purge_enabled) {
    return;
  }

  if (isset($file->uri)) {
    $path = drupal_realpath($file->uri);
    $parts = pathinfo($path);
    $extension = $parts['extension'];
    $purge_extensions = _govcms_akamai_get_configured_extensions();
    if (!in_array($extension, $purge_extensions)) {
      return;
    }
  } else {
    global $base_url;
    $file = "{$base_url}/${file}";
  }

  if (count(_govcms_akamai_fast_purge_process_edgerc()) == 0) {
    drupal_set_message('Akamai Fast Purge is enabled but no credentials have been provided.', 'warning');
    return;
  }

  // Make the actual API call.
  _govcms_akamai_fast_purge_api_call($file);
}

/**
 * Make the API call to Akamai Purge.
 * @see https://github.com/akamai/AkamaiOPEN-edgegrid-php-client
 * @see https://developer.akamai.com/api/purge/ccu/resources.html
 *
 * @param $file
 * @param $credentials_path
 */
function _govcms_akamai_fast_purge_api_call($file) {
  $credentials = _govcms_akamai_fast_purge_process_edgerc();
  module_load_include('phar', 'govcms_akamai_fast_purge', 'includes/akamai-open-edgegrid-client-1.0.0');
  $client = new Client();
  $client->setAuth($credentials['default']['client_token'], $credentials['default']['client_secret'], $credentials['default']['access_token']);

  $network_selection = variable_get('govcms_akamai_fast_purge_api_network', 0);
  $api_network = ((int) $network_selection == 1) ? 'staging' : 'prod';
  $api_request_url = '/ccu/v3/invalidate/url/' . $api_network;

  $purge_url = (isset($file->uri)) ? file_create_url($file->uri) : $file;
  $api_request_options = [
    'json' => [
      'objects' => [
        $purge_url
      ],
    ],
    'handler' => _govcms_akamai_fast_purge_get_request_handler($client),
    'debug' => TRUE
  ];

  watchdog(GAFP_WATCHDOG_TYPE, 'Purging Url: @url', ['@url' => $purge_url]);
  try {
    /** @var \GuzzleHttp\Psr7\Response $response */
    $response = $client->request('POST', $api_request_url, $api_request_options);
    $responseContent = $response->getBody()->getContents();
    watchdog(GAFP_WATCHDOG_TYPE, 'Request Completed - Full response: @response', ['@response' => $responseContent]);
  }
  catch (ClientException $e) {
    $responseContent = $e->getResponse()->getBody()->getContents();
    watchdog(GAFP_WATCHDOG_TYPE, 'Request Failed: @err_msg | Full response: @response', ['@err_msg' => $e->getMessage(), '@response' => $responseContent], WATCHDOG_ERROR);
  }
}

/**
 * Creates a request handler
 *
 * @param \Akamai\Open\EdgeGrid\Client $client
 *
 * @return mixed
 */
function _govcms_akamai_fast_purge_get_request_handler(Client $client) {
  // Grab the client's handler instance.
  $clientHandler = $client->getConfig('handler');

  // Create a middleware that echoes parts of the request.
  $tapMiddleware = Middleware::tap(function (Request $request) {
    // Prepare the message to write to watchdog.
    $message = "Sending Request - Path [@path] | Headers [@headers]";
    $message_vars = ['@path' => $request->getUri()->getPath(), '@headers' => ''];

    // Print out the headers.
    foreach ($request->getHeaders() as $name => $values) {
      $message_vars['@headers'] .= $name . ': ' . implode(', ', $values) . "; ";
    }
    watchdog(GAFP_WATCHDOG_TYPE, $message, $message_vars);
  });

  return $tapMiddleware($clientHandler);
}
