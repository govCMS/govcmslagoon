version: 2
jobs:
  build:
    working_directory: /app
    docker:
      - image: quay.io/govcms/govcms-ci:feature_updates
        environment:
          COMPOSER_ALLOW_SUPERUSER: 1
          COMPOSE_PROJECT_NAME: govcmslagoon
    steps:
      - checkout
      - run:
          name: Validate docker-compose configuration
          command: docker-compose config -q
      - run:
          name: Update codebase to follow CI configuration
          command: cp .env.default .env
      - setup_remote_docker
      - run:
          name: Start amazeeio-network
          command: docker network prune -f && docker network inspect amazeeio-network >/dev/null || docker network create amazeeio-network
      - run:
          name: Build project
          command: |
            ahoy -v build
            docker-compose exec test dockerize -wait tcp://mariadb:3306 -timeout 1m
      - run:
          name: Run tests for containers
          command: ./tests/goss/run_all.sh
      - run:
          name: Install site
          command: ahoy -v install -- install_configure_form.update_status_module='array(FALSE,FALSE)'
      - run:
          name: Get site and module version status
          command: |
            ahoy drush st
            ahoy drush pml
      - run:
          name: Test that Redis is functional
          command: |
            # Set ENABLE_REDIS env var and warm cache with a bootstrap.
            docker-compose exec -T --env ENABLE_REDIS=true cli drush status
            redisKeys=$(docker-compose exec -T redis redis-cli KEYS '*' | wc -l)
            if [[ $redisKeys -le 1 ]]; then
              echo 'Redis fail: No valid cache keys.'
              exit 1
            else
              echo "Redis success: Redis contains $redisKeys keys."
            fi
      - run:
          name: Test Nginx configuration
          command: |
            # Wait for nginx container.
            docker-compose exec -T test dockerize -wait tcp://nginx:8080 -timeout 1m
            # Validate nginx configuration.
            docker-compose exec -T nginx nginx -t
            # Validate composer.json and composer.lock configuration for tests.
            composer validate --strict -d .docker/images/nginx/tests
            # Install dependencies for tests.
            composer install -d .docker/images/nginx/tests
            # Create artifact directory.
            mkdir -p /tmp/artifacts/phpunit
            # Run tests and store logs in artifacts directory.
            .docker/images/nginx/tests/vendor/bin/phpunit -c .docker/images/nginx/tests/phpunit.xml --log-junit /tmp/artifacts/phpunit/nginx.xml
      - store_test_results:
          path: /tmp/artifacts/phpunit
          when: always
